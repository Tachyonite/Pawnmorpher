<Defs>
    <MorphDef>
        <description>this is what shows up in the Pawn's bio</description>
        
        list of different 'categories' this morph falls into, like combat, production, etc. 
        the categories defined in the base mod are listed below, you can also define your own by making 
        new MorphCategoryDefs (only relavent fields are defName and label) 
        
        the categories defined in PMCore: 
        Powerful,Combat,Production,Reptile,Social,Canid,Crafter,Chimera
        
        note: Canid and reptile should considered depricated 

        <categories>
            <li>Combat</li>
        </categories>

        the animal this morph is a hybrid of, this race is used to generate the hybrid race by (mostly) averaging 
        the stats of the animal and human   
        <race>AnimalRace</race>

        this is the classification this morph falls into, this is used to determine what mutations this morph gets 
        for example WolfMorph is under the 'Canid' class and so inherit all canid specific mutations as well as mutations specific 
        to the WolfMorph 

        if you define mutations that conflict with a more general mutation, for example define fur specific to your morph, the morph will keep 
        the more specific mutation and ignore the general one 
        <classification>AnimalClassDef</classification>
        

        if you want to sepcifically exclude mutation from a morph that it would otherwise have list the here 
        ex: add fur here if this morphs is a mammals but shouldn't have fur        <mutationExclusionList>
            <li>MutationDef1</li>
            <li>MutationDef2</li>
        </mutationExclusionList>

        these are a list of animals that are associated with this morph but who don't influence the hybrid race
        transformation targets 
        setting this is useful for getting mutations for animals that don't have morphs yet
        <associatedAnimals>
            <li>RaceDef</li>
        </associatedAnimals>

        optional field to define a 'Group' this morph falls into. 'Groups' are used when you want to give a morph bonuses/drawbacks based 
        on how many morphs or animals the colony has of the same group. For example canine morphs are happier the more canine are around 
        The only groups available in core are Canines, and HerbivoreHerding but you can define more morph groups yourself 
        see MorphGroup.xml example
        <group>MorphGroup</group>

        this is where you specify the various settings for the hybrid race of this morph 
        <raceSettings>

        </raceSettings>

        this is where you specify extra stuff when a pawn turns into a hybrid race or reverts back to human  
        <transformSettings>
            a list of additional stat modifiers you would like to add onto the morph other then those specified in 
            `race`
            <statModifiers>
                <stat>mod</stat>
            </statModifiers>

            <thoughtSettings>
                <replacerList>
                    this is a list of thought substitutions for your hybrid 
                    <li>
                        <original>OriginalThought</original>
                        <replacer>ReplacementThought</replacer>
                    </li>
                </replacerList>

                optional field for thoughts for when this morph eats meat from the animal defined in `race`
                <ateAnimalThought>
                    if they eat the meat directly
                    <thought>AteMeatDirectThought</thought>

                    if they eat the meat directly and have the cannibal trait 
                    <thoughtCannibal>AteMeatDirectAsCannibalThought</thoughtCannibal>

                    if they eat the meat as an ingredient in a meal 
                    <ingredientThought>AteMeatAsIngredientThought</ingredientThought>

                    if they eat the meat as an ingredient in a meal and have the cannibal triat
                    <ingredientThoughtCannibal>AteMeatAsIngredientCannibal</ingredientThoughtCannibal>
                </ateAnimalThought>

                optional field for thoughts for when this morph butchers the animal defined in `race`
                <butcheredAnimalThought>
                    if they are the one that butchered the corpse 
                    <thought>ButcheredCorpse</thought>
                    if someone else in the colony butchered the corpse 
                    <knowThought>KnowButcheredCorpse</knowThought>
                </butcheredAnimalThought>

                optional field that if true will make this morph ignore the negitive thoughts for eating humanlikes 
            <suppressHumanlikeCannibalThoughts>true</suppressHumanlikeCannibalThoughts>

            optional field that if true makes this morph ignore the negative thoughts for eating raw food 
            <canEatRaw>true</canEatRaw>

            optional field that lists ThoughtDefs that this morph will never get 
            <thoughtsBlackList>
                <li>ThoughtDef</li>
            </thoughtsBlackList>

            optional field that specifies thoughts this morph will get when eating meat from other races 
            <ateThoughtsSpecifics>
                <li>
                    if they eat the meat directly
                    <thought>AteMeatDirectThought</thought>

                    if they eat the meat directly and have the cannibal trait 
                    <thoughtCannibal>AteMeatDirectAsCannibalThought</thoughtCannibal>

                    if they eat the meat as an ingredient in a meal 
                    <ingredientThought>AteMeatAsIngredientThought</ingredientThought>

                    if they eat the meat as an ingredient in a meal and have the cannibal triat
                    <ingredientThoughtCannibal>AteMeatAsIngredientCannibal</ingredientThoughtCannibal>

                    a list of races this thought applies to 
                    <raceList>
                        <li>Race</li>
                    </raceList>
                </li>
            </ateThoughtsSpecifics>

            optional field that specifies thoughts this morph will get when butchering meat from other races 
            <butcherThoughtsSpecifics>
                <li>
                    if they are the one that butchered the corpse 
                    <thought>ButcheredCorpse</thought>
                    if someone else in the colony butchered the corpse 
                    <knowThought>KnowButcheredCorpse</knowThought>
                    a list of races these thoughts apply to 
                    <raceList>
                        <li>Race</li>
                    </raceList>
                </li>
            </butcherThoughtsSpecifics>
            </thoughtSettings>
            
            <graphicsSettings>
                <skinColorOverride>r,g,b</skinColorOverride>
                <femaleSkinColorOverride>r,g,b</femaleSkinColorOverride>
                <skinColorOverrideSecond>r,g,b</skinColorOverrideSecond>
                <femaleSkinColorOverrideSecond>r,g,b</femaleSkinColorOverrideSecond>
                <femaleHairColorOverride>r,g,b</femaleHairColorOverride>
                <hairColorOverride>r,g,b</hairColorOverride>
                <femaleHairColorOverrideSecond>r,g,b</femaleHairColorOverrideSecond>
                <hairColorOverrideSecond>r,g,b</hairColorOverrideSecond>
            </graphicsSettings>
            

            HAR's restriction settings that get applied to the hybrid race 
            see HAR's wiki for more information
            <restrictionSettings>
                ...
            </restrictionSettings>

            if you want to make your own hybrid race from start use this field, this morph will then use 
            the given race as it's hybrid and most other fields will be ignored  
            <explicitHybridRace>ExplicitHybrid</explicitHybridRace>

            if you use an explicit hybrid race and set this to true this will copy all HAR body addions from 
            human onto the explicit race
            <transferHumanBodyAddons>true/false</transferHumanBodyAddons>
        </transformSettings>

        a list of aspects that are added when a pawn turns into the hybrid race of this morph 
        <addedAspects>
            <li>AspectDef</li>
        </addedAspects>

        properties for the autogenerated full transformation hediff        <fullTfHediffProps>
            the label for the hediff
            <label>hediffLabel</label>
            the description for the hediff
            <description>desc</description>
            the rgb value of the hediff label
            <labelColor>0.3,0.25,0.71</labelColor>
            mutagen to use for infectability and aspect givers. optional
            <mutagen>defaultMutagen</mutagen>
            settings for the alert letter for the changing stage
            <tfAlert>
                <letterLabelText>{0} is at risk of fully changing very soon.</letterLabelText>
                <letterCotentText>{0} is at risk of transforming into an animal soon. You can use stabilizer to prevent this.</letterCotentText>
            </tfAlert>
            chance for the generated hediff to remove mutations not from this morph
            <removeNonMorphPartChance>0.5</removeNonMorphPartChance>

            <TFMiscSettings>
                the chance for the transformation to be a manhunter
                <manhunterSettings>
                    multiplier on the global manhunter chance set in the mod settings
                    <mult>1</mult>
                    offset on the global manhunter chance set in the mod settings
                    <offset>0</offset>
                </manhunterSettings>
                tale def for use in art made by pawns
                <TaleDef>TfTaleDef</TaleDef>
                if true, display a warning message before a pawn transforms
                <displayWarning>true</displayWarning>
                if set, all former humans will have this sapience value rather then a random value
                <forcedSapience>1</forcedSapience>
            </TFMiscSettings>
            factor to increase the pawns hunger rate
            <hungerRateFactor>0.1</hungerRateFactor>
            capacity modifiers for the changing and transforming stages 
            optional
            <capMods>
                ...
            </capMods>
            aspect givers for use on the transforming stage 
            optional
            <aspectGivers>
                ...
            </aspectGivers>
        </fullTfHediffProps>
        if set, will be used over the autogenerated hediff
        <fullTransformation>FullTfHediff</fullTransformation>

        properties for the partial hediff        <partialTfHediffProps>
            same as fullTfHediffProps
        </partialTfHediffProps>

        the hediff that is the 'partial' hediff, ie should only add 1-2 mutations before being removed
        if set this will be used over the autogenerated hediff 
        <partialTransformation>PartialTfHediff</partialTransformation>

        properties for the autogenerated injector        
        this must be set for an injector def to be auto generated 
        <injectorProperties>
            label for the injector
            <label>label</label>
            description for the injector
            <description>desc</description>
            the amount of work required to make the injector
            <workAmount>100</workAmount>
            stat modifiers for the injector
            <statBases>
                ...
            </statBases>
            the tech level of the injector
            <techLevel>Industrial</techLevel>
            trader tags for the injector
            <traderTags>
                ...
            </traderTags>
            if true, default trader tags will be added
            <useDefaultTags>true</useDefaultTags>
            how much slurry is needed to make an injector
            <slurryCost>1</slurryCost>
            how much neutroamine is needed to make an injector
            <neutroamineCost>1</neutroamineCost>
            how much mutanite is needed to make an injector
            <mutaniteCost>1</mutaniteCost>
            additional things needed to make an injector 
            optional
            <costList>
                ...
            </costList>
            additional outcome doers for the injector. Note: the outcome doer for adding the tf hediff will be generated automatically and need not be added here 
            optional
            <outcomeDoers>
                ...
            </outcomeDoers>
            graphic data for the injectors
            <graphicData>
                ...
            </graphicData>
        </injectorProperties>

        def of the transformation injector.
        if set, will be used over an auto generated
        this should either be defined or injectorProerties should be set
        <injectorDef>InjectorDef</injectorDef>

    </MorphDef>
</Defs>